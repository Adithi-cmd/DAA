#include <stdio.h>
#include <stdlib.h>
int min(int,int);
void floyds(int p[10][10],int n)
{
 int i,j,k;
 for(k=1;k<=n;k++)
 for(i=1;i<=n;i++)
 for(j=1;j<=n;j++)
 if(i==j)
 p[i][j]=0;
 else
 p[i][j]=min(p[i][j],p[i][k]+p[k][j]);
 }
 int min(int a,int b)
 {
 if(a<b)
 return(a);
 else
 return(b);
 }
 int main(int argc,char*argv[])
 {
 int p[10][10],w,n,e,u,v;
 int i,j;
 int start=0,end=0;
 float sp1,sp2,sp3;
 printf("\n enter the number of vertices:\n");
 scanf("%d",&n);
 printf("\n enter the number of edge:\n");
 scanf("%d",&e);
 for(i=1;i<=n;i++)
 {
 for(j=1;j<=n;j++)
 p[i][j]=999;
 }
 for(i=1;i<=e;i++){
 printf("\n enter the end vertices of edge%d with its weight \n",i);
 scanf("%d%d%d",&u,&v,&w);
 p[u][v]=w;
 }
 printf("\n matrix of input data\n");
 for(i=1;i<=n;i++)
 {
 for(j=1;j<=n;j++)
 printf("%d\t",p[i][j]);
 printf("\n");
 }
 floyds(p,n);
 printf("\n the shortest paths are:\n");
 for(i=1;i<=n;i++)
 {
 for(j=1;j<=n;j++)
 {
 if(i!=j)
 printf("%d\t",p[i][j]);
 else
 printf("o\t");
 }
 printf("\n");
 }
 system("PAUSE");
 return 0;
 }
